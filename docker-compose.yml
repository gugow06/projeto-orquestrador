# Docker Compose para produção
version: '3.8'

services:
  # Aplicação principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: projeto-orquestrador-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      # Variáveis de ambiente serão carregadas do .env.production
    env_file:
      - .env.production
    volumes:
      # Volumes para persistência de dados
      - app_logs:/app/logs
      - app_cache:/app/cache
      - app_uploads:/app/uploads
      # Configurações (opcional)
      - ./config:/app/config:ro
    networks:
      - app_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: projeto-orquestrador-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Nginx como reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: projeto-orquestrador-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - app_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus para monitoramento (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: projeto-orquestrador-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app_network
    profiles:
      - monitoring

  # Grafana para visualização (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: projeto-orquestrador-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - app_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Volumes nomeados para persistência
volumes:
  app_logs:
    driver: local
  app_cache:
    driver: local
  app_uploads:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Rede personalizada
networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16